#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def display_help
    help_content = <<~HELP

      An expense recording system

      Commands:
      add AMOUNT MEMO [DATE] - record a new expense
      clear                  - delete all expenses
      list                   - list all expenses
      delete NUMBER          - remove expense with id NUMBER
      search QUERY           - list expenses with a matching memo field
    HELP

    puts help_content
  end

  def list_expenses
    puts nil

    sql = <<~SQL
      SELECT * FROM expenses
        ORDER BY created_on;
    SQL

    sql_result = @connection.exec(sql)

    display_count(sql_result)
    display_expenses(sql_result) if sql_result.ntuples > 0
  end

  def add_expense(amount, memo)
    return display_add_expense_error unless amount && memo

    sql = <<~SQL
      INSERT INTO expenses (amount, memo)
        VALUES ($1, $2);
    SQL

    params = [amount, memo]
    @connection.exec_params(sql, params)
    puts "Expense added successfully"
  end

  def search_expenses(search_term)
    search_term ||= ''

    sql = <<~SQL
      SELECT * FROM expenses
        WHERE memo ~* $1
        ORDER BY created_on;
    SQL

    sql_result = @connection.exec_params(sql, [search_term])

    display_count(sql_result)
    display_expenses(sql_result) if sql_result.ntuples > 0
  end

  def delete_expense(delete_id)
    return puts 'Invalid Integer' unless delete_id.to_i > 0

    sql_query = <<~SQL
      SELECT * FROM expenses
        WHERE id = $1;
    SQL

    query_result = @connection.exec_params(sql_query, [delete_id.to_i])
    return puts "There is no expense with the id '#{delete_id}'." if query_result.ntuples == 0

    sql_delete = <<~SQL
      DELETE FROM expenses
        WHERE id = $1;
    SQL

    @connection.exec_params(sql_delete, [delete_id.to_i])
    puts "The following expense has been deleted:"
    display_expenses(query_result)
  end

  def delete_all_expenses
    sql = <<~SQL
      DELETE FROM expenses;
    SQL

    @connection.exec(sql)
    puts "All expenses have been deleted."
  end

  private

  def setup_schema
    sql_query = <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
        WHERE table_schema = 'public'
          AND table_name = 'expenses';
    SQL

    result = @connection.exec(sql_query)

    return unless result[0]['count'] == '0'

    sql_create_table = <<~SQL
      CREATE TABLE expenses (
        PRIMARY KEY (id),
        id SERIAL,
        amount NUMERIC(6,2) NOT NULL,
          CONSTRAINT positive_amount CHECK (amount >= 0.01),
        memo TEXT NOT NULL,
        created_on DATE NOT NULL DEFAULT CURRENT_DATE
      );
    SQL

    @connection.exec(sql_create_table)
  end

  def display_add_expense_error
    puts "You must provide an amount and memo."
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      formatted_row = [
        tuple['id'].rjust(3),
        tuple['created_on'].rjust(10),
        tuple['amount'].rjust(7),
        tuple['memo']
      ]

      puts formatted_row.join(' | ')
    end

    amount_sum = expenses.field_values('amount').map(&:to_f).sum
    puts "-" * 50
    puts "Total #{amount_sum.to_s.rjust(20)}"
  end

  def display_count(expenses)
    row_count = expenses.ntuples

    if row_count == 0
      puts "There are no expenses."
    else
      puts "There are #{row_count} expense#{"s" if row_count != 1}."
    end
  end
end

class CLI
  def initialize
    @expense_data = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift

    case command&.downcase
    when 'list'
      @expense_data.list_expenses
    when 'add'
      amount, memo = arguments
      @expense_data.add_expense(amount, memo)
    when 'search'
      search_term = arguments[0]
      @expense_data.search_expenses(search_term)
    when 'delete'
      delete_id = arguments[0]
      @expense_data.delete_expense(delete_id)
    when 'clear'
      confirmed = prompt_clear_confirmation
      @expense_data.delete_all_expenses if confirmed
    when nil
      @expense_data.display_help
    else
      puts nil
      puts "INVALID command. Refer to help information"
      @expense_data.display_help
    end
  end

  private

  def prompt_clear_confirmation
    puts "This will remove all expenses. Are you sure? (y/n)"
    $stdin.getch.downcase == 'y'
  end
end

CLI.new.run(ARGV)